import { describe, it } from "jsr:@std/testing/bdd";
import { expect } from "jsr:@std/expect";


const Directions = [
  [-1, 0],
  [0, -1],
  [1, 0],
  [0, 1],
];
const [Empty, Rook, Pawn] = ".Rp";

const numRookCaptures = (board: string[][]) => {
  const findRook = () => {
    for (let x = 0; x < m; ++x) {
      for (let y = 0; y < n; ++y) {
        if (board[x][y] === Rook) return [x, y];
      }
    }
    return null;
  };

  const [m, n] = [board.length, board[0].length];
  const [x, y] = findRook()!;

  let count = 0;
  for (const [dx, dy] of Directions) {
    let x1 = x;
    let y1 = y;
    while (true) {
      x1 += dx;
      y1 += dy;
      switch (board[x1]?.[y1]) {
        case Empty:
          continue;
        case Pawn:
          ++count;
      }
      break;
    }
  }

  return count;
};

describe("available captures for rook", () => {
  it("case 1", () => {
    expect(
      numRookCaptures([
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "p", ".", ".", ".", "."],
        [".", ".", ".", "R", ".", ".", ".", "p"],
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "p", ".", ".", ".", "."],
        [".", ".", ".", "p", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
      ]),
    ).toBe(3);
  });

  it("case 1", () => {
    expect(
      numRookCaptures([
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "p", ".", ".", ".", "."],
        [".", ".", ".", "R", ".", ".", ".", "p"],
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "B", ".", ".", ".", "."],
        [".", ".", ".", "p", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
      ]),
    ).toBe(2);
  });

  it("case 3", () => {
    expect(
      numRookCaptures([
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "p", ".", ".", ".", "."],
        [".", ".", ".", "R", ".", ".", ".", "p"],
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
      ]),
    ).toBe(2);
  });

  it("case 4", () => {
    expect(
      numRookCaptures([
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", "p", "p", "p", "p", "p", ".", "."],
        [".", "p", "p", "B", "p", "p", ".", "."],
        [".", "p", "B", "R", "B", "p", ".", "."],
        [".", "p", "p", "B", "p", "p", ".", "."],
        [".", "p", "p", "p", "p", "p", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "."],
      ]),
    ).toEqual(0);
  });
});
